INSERT INTO `Post`(`id`,`title`,`content`,`contentHtml`,`hidden`,`createdAt`,`updatedAt`,`authorId`) VALUES
(2,"PlanetScale Branching™","The PlanetScale Data Branching feature allows you to treat your databases like code by unlocking the ability to branch databases.\n\nPlanetScale provides two types of database branches: development and production.\n\nDevelopment branches provide isolated copies of your database schema where you can make changes, experiment, or run CI against. Instantly branch your production database to create a staging environment for testing out your schema changes.\n\nProduction branches are highly available databases intended for production traffic. They are protected from direct schema changes by default and include automated daily backups.\n\nLearn more about branching databases.","<p>The PlanetScale Data Branching feature allows you to treat your databases like code by unlocking the ability to branch databases.</p>\n<p>PlanetScale provides two types of database branches: development and production.</p>\n<p>Development branches provide isolated copies of your database schema where you can make changes, experiment, or run CI against. Instantly branch your production database to create a staging environment for testing out your schema changes.</p>\n<p>Production branches are highly available databases intended for production traffic. They are protected from direct schema changes by default and include automated daily backups.</p>\n<p>Learn more about branching databases.</p>\n",0,"2022-05-13 19:32:29.271","2022-05-13 19:32:29.272","cl34u2thh010509mm6ijljgkh"),
(3,"Non-blocking schema changes","PlanetScale makes it safe to deploy schema changes to production and easy to automate schema management as a part of your CI/CD process. PlanetScale schema changes are applied online and protect against changes that block databases, lock individual tables, or slow down production during the migration.\n\nUse a development branch to apply schema changes and view the schema diff in the UI or the CLI. Once you’re satisfied with your schema changes, you can open a deploy request.\n\nLearn more about non-blocking schema changes.","<p>PlanetScale makes it safe to deploy schema changes to production and easy to automate schema management as a part of your CI/CD process. PlanetScale schema changes are applied online and protect against changes that block databases, lock individual tables, or slow down production during the migration.</p>\n<p>Use a development branch to apply schema changes and view the schema diff in the UI or the CLI. Once you’re satisfied with your schema changes, you can open a deploy request.</p>\n<p>Learn more about non-blocking schema changes.</p>\n",0,"2022-05-13 19:33:33.488","2022-05-13 19:33:33.489","cl4eh6jfa000609mmz7crdc8b"),
(4,"Deploy requests!","Deploy requests allow you to propose schema changes and get feedback from your team. The deploy requests display DDL statements (CREATE, ALTER, and DROP) for each table changed, with a line-by-line schema diff, making it easy to review the changes.\n\nFor example, you can pair deploy requests with GitHub pull requests so that your teammates can review the code and the schema changes in parallel.\n\nPlanetScale also analyzes your schema changes for conflicts when you open a deploy request. It checks against the production schema at the time the branch was created and against the current production schema which may have changed in the interim. This ensures your changes can be deployed safely without impacting production.","<p>Deploy requests allow you to propose schema changes and get feedback from your team. The deploy requests display DDL statements (CREATE, ALTER, and DROP) for each table changed, with a line-by-line schema diff, making it easy to review the changes.</p>\n<p>For example, you can pair deploy requests with GitHub pull requests so that your teammates can review the code and the schema changes in parallel.</p>\n<p>PlanetScale also analyzes your schema changes for conflicts when you open a deploy request. It checks against the production schema at the time the branch was created and against the current production schema which may have changed in the interim. This ensures your changes can be deployed safely without impacting production.</p>\n",0,"2022-05-13 19:34:12.100","2022-05-13 19:34:12.100","cl34qvwfc0006ba7argfswj6t"),
(5,"How to deploy a schema change","Once a deploy request has been approved, it gets added to the deploy queue. Schema changes are applied to your production database branch in the order in which they are added to the deploy queue.\n\nAs a part of the process of adding the schema changes to the deploy queue, PlanetScale analyzes the schema changes in the deploy requests ahead of your deploy request for any potential conflicts. If a conflict exists, your deploy request is rejected from the queue, and you are immediately notified of the conflict. This means you’ll never wait for your schema change to deploy only to learn that there’s an unanticipated conflict. This is especially useful if long-running schema changes are being applied.","<p>Once a deploy request has been approved, it gets added to the deploy queue. Schema changes are applied to your production database branch in the order in which they are added to the deploy queue.</p>\n<p>As a part of the process of adding the schema changes to the deploy queue, PlanetScale analyzes the schema changes in the deploy requests ahead of your deploy request for any potential conflicts. If a conflict exists, your deploy request is rejected from the queue, and you are immediately notified of the conflict. This means you’ll never wait for your schema change to deploy only to learn that there’s an unanticipated conflict. This is especially useful if long-running schema changes are being applied.</p>\n",0,"2022-05-13 19:35:08.739","2022-05-13 19:35:08.740","cl392lams012709mf7kho6g0d"),
(6,"How to revert a schema change: Rewind","If you ever deploy a schema change, only to realize you need to undo it, PlanetScale can handle that. With our Rewind feature, you have 30 minutes to \"undo\" a schema change deployment. Simply click the \"Revert changes\" button on the affected deploy request page and your production database will instantly revert back to the previous schema. Additionally, any data that was added to your production database in the time between deployment and reverting will be retained. Learn more about this process in our How Rewind works section of our deploy requests documentation.","<p>If you ever deploy a schema change, only to realize you need to undo it, PlanetScale can handle that. With our Rewind feature, you have 30 minutes to \"undo\" a schema change deployment. Simply click the \"Revert changes\" button on the affected deploy request page and your production database will instantly revert back to the previous schema. Additionally, any data that was added to your production database in the time between deployment and reverting will be retained. Learn more about this process in our How Rewind works section of our deploy requests documentation.</p>\n",0,"2022-05-13 19:38:01.071","2022-05-13 19:38:01.072","cl34u30sb014409mmxm37l55u");
